openapi: 3.0.0
info:
  description: "Unified API for managing users, tractors, posts, and comments in the\
    \ Tractor Forum"
  title: Kletis Forum API
  version: 1.0.0
servers:
- description: Local development server
  url: http://localhost:3000
paths:
  /users/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: List of all users
      summary: Get all users
      x-accepts:
      - application/json
    post:
      requestBody:
        content:
          application/json:
            examples:
              newUser:
                value:
                  username: john_doe
                  email: john@example.com
                  password: securePassword
                  type: guest
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created successfully
      summary: Create a new user
      x-content-type: application/json
      x-accepts:
      - application/json
  /users/{id}/:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User deleted successfully
      summary: Delete a user by ID
      x-accepts:
      - application/json
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User found
        "404":
          description: User not found
      summary: Get a user by ID
      x-accepts:
      - application/json
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              updateUser:
                value:
                  username: john_doe_updated
                  email: john_updated@example.com
                  type: mod
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: User updated successfully
      summary: Update a user by ID
      x-content-type: application/json
      x-accepts:
      - application/json
  /tractors/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tractor'
                type: array
          description: List of all tractors
      summary: Get all tractors
      x-accepts:
      - application/json
    post:
      requestBody:
        content:
          application/json:
            examples:
              newTractor:
                value:
                  name: Fendt
                  description: Good tractor
                  created_by: 67101f6c63c35321098a2849
            schema:
              $ref: '#/components/schemas/Tractor'
        required: true
      responses:
        "201":
          description: Tractor created successfully
      summary: Create a new tractor category
      x-content-type: application/json
      x-accepts:
      - application/json
  /tractors/{id}/:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Tractor deleted successfully
      summary: Delete a tractor by ID
      x-accepts:
      - application/json
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tractor'
          description: Tractor found
        "404":
          description: Tractor not found
      summary: Get tractor by ID
      x-accepts:
      - application/json
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              updateTractor:
                value:
                  name: Fendt Updated
                  description: Updated description
            schema:
              $ref: '#/components/schemas/Tractor'
        required: true
      responses:
        "200":
          description: Tractor updated successfully
      summary: Update a tractor by ID
      x-content-type: application/json
      x-accepts:
      - application/json
  /posts/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Post'
                type: array
          description: List of all posts
      summary: Get all posts
      x-accepts:
      - application/json
    post:
      requestBody:
        content:
          application/json:
            examples:
              newPost:
                value:
                  title: How to start a tractor
                  content: I'm having trouble starting my Fendt.
                  author: 6711902302d2006ebfa751c1
                  tractor: 671197165fc435cd709fd102
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "201":
          description: Post created successfully
      summary: Create a new post
      x-content-type: application/json
      x-accepts:
      - application/json
  /posts/{id}/:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Post deleted successfully
      summary: Delete a post by ID
      x-accepts:
      - application/json
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: Post found
        "404":
          description: Post not found
      summary: Get a post by ID
      x-accepts:
      - application/json
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              updatePost:
                value:
                  title: How to start a tractor (Updated)
                  content: Updated content
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: Post updated successfully
      summary: Update a post by ID
      x-content-type: application/json
      x-accepts:
      - application/json
  /post/{postID}/comments/:
    get:
      parameters:
      - explode: false
        in: path
        name: postID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: List of comments for the specific post
        "404":
          description: Post not found
      summary: Get comments by post ID
      x-accepts:
      - application/json
  /user/{userId}/comments/:
    get:
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: List of comments by the specific user
        "404":
          description: User not found
      summary: Get comments by user ID
      x-accepts:
      - application/json
  /comments/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: List of all comments
      summary: Get all comments
      x-accepts:
      - application/json
    post:
      requestBody:
        content:
          application/json:
            examples:
              newComment:
                value:
                  content: This is my comment
                  post: 67119b1aeaf93d78b7d629c9
                  author: 6711902302d2006ebfa751c1
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "201":
          description: Comment created successfully
      summary: Create a new comment
      x-content-type: application/json
      x-accepts:
      - application/json
  /comments/{id}/:
    delete:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Comment deleted successfully
      summary: Delete a comment by ID
      x-accepts:
      - application/json
    get:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Comment found
        "404":
          description: Comment not found
      summary: Get a comment by ID
      x-accepts:
      - application/json
    put:
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              updateComment:
                value:
                  content: Updated comment content
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        "200":
          description: Comment updated successfully
      summary: Update a comment by ID
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    User:
      example:
        password: password
        created_at: 2000-01-23T04:56:07.000+00:00
        _id: _id
        type: admin
        email: email
        username: username
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        created_at:
          format: date-time
          type: string
        type:
          enum:
          - admin
          - mod
          - guest
          type: string
      type: object
    Tractor:
      example:
        name: name
        description: description
        _id: _id
        created_by: created_by
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        created_by:
          type: string
      type: object
    Post:
      example:
        upvotes: 0
        author: author
        tractor: tractor
        created_at: 2000-01-23T04:56:07.000+00:00
        _id: _id
        title: title
        downvotes: 6
        content: content
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: string
        tractor:
          type: string
        upvotes:
          type: integer
        downvotes:
          type: integer
        created_at:
          format: date-time
          type: string
      type: object
    Comment:
      example:
        post: post
        author: author
        created_at: 2000-01-23T04:56:07.000+00:00
        _id: _id
        content: content
      properties:
        _id:
          type: string
        content:
          type: string
        post:
          type: string
        author:
          type: string
        created_at:
          format: date-time
          type: string
      type: object

